<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>renrr&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://renrr.github.io/"/>
  <updated>2020-04-12T03:03:31.853Z</updated>
  <id>https://renrr.github.io/</id>
  
  <author>
    <name>renrr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Thrift</title>
    <link href="https://renrr.github.io/post/8c005afd.html"/>
    <id>https://renrr.github.io/post/8c005afd.html</id>
    <published>2020-04-11T13:35:45.000Z</published>
    <updated>2020-04-12T03:03:31.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Thrift"><a href="#Apache-Thrift" class="headerlink" title="Apache Thrift"></a>Apache Thrift</h2><blockquote><p>Thrift是一个典型的C/S结构，客户端和服务器端可以使用不同的语言开发。<br>客户端和服务端的关联语言就是IDL(Interface Description Language)</p></blockquote><p><strong>Thrift数据类型</strong></p><ul><li>byte 有符号字节</li><li>i16 16位有符号整数</li><li>i32 32位有符号整数</li><li>i64 64位有符号整数</li><li>double 64位浮点数</li><li>string 字符串</li></ul><p><strong>Thrift工作原理：</strong></p><blockquote><p>实现多语言通信</p></blockquote><ul><li>数据传输使用socket(多语言均支持)，数据在以特定的格式发送（如String）,接收放接收后在进行解析。</li><li>定义thrift文件，由thrift文件（IDL）生成双方语言的接口、model,在生成的model以及的接口中会有解码编码的代码</li></ul><p><strong>Thrift的 IDL文件</strong></p><ul><li>struct:目的就是将一些数据聚合在一起，方便传输管理（理解为类）</li><li>enum:枚举的定义和java类似</li><li>exception:thrift支持自定义异常，规则与struct类似</li><li>service:服务相当于java代码中的interface,创建的service在经过代码生成后，就会生成客户端和服务器端的框架代码。</li><li>typedef:类型定义，比如typedef i32 int; 将i32的数据类型定义为int</li><li>const:使用const关键字作常量定义</li><li>namespace:命名空间相当于java中的package,格式namespace 语言 路径，比如 namespace java com.cherry.test</li><li>include:文件包含，相当于java的import</li><li>required,optional：必须和可选字段<br>如何注释：# //开头，/**/包含的也是注释<br>执行命令：thrift –gen java src/main/thrift/data.thrift 生成对应java语言的文件</li></ul><p><strong>Thrift架构：</strong><br><img src="../assets/image/thrift%E6%9E%B6%E6%9E%84.png" alt="image"></p><p><strong>Thrift传输协议：</strong></p><ul><li>TBinaryProtocol – 二进制格式</li><li>TCompactProtocol – 压缩格式</li><li>TJSONProtocol – JSON格式</li><li>TSimpleJSONProtocol – 提供JSON只写协议，生成的文件很容易通过脚本语言解析</li><li>TDebugProtocol – 使用易懂的可读的文本格式，以便debug</li></ul><p><strong>Thrift数据传输方式：</strong></p><ul><li>TSocket –阻塞式Socket</li><li>TFramedTransport – 以frame为单位进行传输，非阻塞式服务中使用。</li><li>TFileTransport – 以文件形式进行传输。</li><li>TMemoryTransport – 将内存用于I/O. java实现时内部使用了ByteArrayOutputStream</li><li>TZlibTransport – 使用zlib压缩，与其他传输方式联合使用。当前无java实现</li></ul><p><strong>Thrift支持的服务模型：</strong></p><ul><li>TSimpleServer –简单的单线程服务模型，常用于测试</li><li>TThreadPoolServer – 多线程服务模型，使用标准的阻塞式IO</li><li>TNonblockingServer – 多线程服务模型，使用非阻塞式IO(需要使用TFramedTransport数据传输方式)</li><li>THsHaServer – THsHa引入线程池去处理，其模型把读写任务放到线程池去处理；Half-sync/Half-async的处理模式，Half-async是在处理IO事件上（accept/read/write io）,Half-sync用于handler对rpc的同步调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Apache-Thrift&quot;&gt;&lt;a href=&quot;#Apache-Thrift&quot; class=&quot;headerlink&quot; title=&quot;Apache Thrift&quot;&gt;&lt;/a&gt;Apache Thrift&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Thrift是一个典型的C
      
    
    </summary>
    
    
      <category term="RPC" scheme="https://renrr.github.io/categories/RPC/"/>
    
    
      <category term="IDL" scheme="https://renrr.github.io/tags/IDL/"/>
    
  </entry>
  
  <entry>
    <title>Lucene 介绍</title>
    <link href="https://renrr.github.io/post/414a752e.html"/>
    <id>https://renrr.github.io/post/414a752e.html</id>
    <published>2020-04-10T12:35:45.000Z</published>
    <updated>2020-04-12T03:08:50.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene介绍"><a href="#lucene介绍" class="headerlink" title="lucene介绍"></a>lucene介绍</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>生活中的数据总体分为两种类型</p><ul><li>结构化数据：指具有固定格式或有限长度的数据（数据库表中的数据）</li><li>非结构化数据：指不定长或无固定格式的数据 （如邮件，word文档等磁盘上的文件）</li></ul><p>结构化数据的查询方法：</p><ul><li>sql语句</li></ul><p>非结构化数据的查询方法：</p><ul><li>顺序扫描法(Serial Scanning)：顺序扫描所有文件，速度慢</li><li>全文检索(Full-text Search)：非结构化数据中的一部分信息提取出来，重新组织为索引，这种先建立索引，再对索引进行搜索的过程就叫全文检索</li></ul><blockquote><p>Lucene是apache下的一个开源的全文检索引擎工具包,但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎;<br>Lucene 的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene 是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。</p></blockquote><h2 id="全文检索的一般过程"><a href="#全文检索的一般过程" class="headerlink" title="全文检索的一般过程"></a>全文检索的一般过程</h2><p><img src="../assets/image/lucene.png" alt="image"><br>lucene包含两部分：建立索引和搜索服务。建立索引是将源（本质是字符串）写入索引或者将源从索引中删除；进行搜索是向用户提供全文搜索服务，用户可以通过关键词定位源。</p><ol><li><p>建立索引的流程<br>使用analyzer处理源字符串，包括：分词，即分成一个个单词；去除stopword（可选）。<br>将源中的有效信息以不同Field的形式加入Document中，并把Document加入索引，从而在索引中记录有效的Field。<br>将索引写入存储器（内存或磁盘）。</p></li><li><p>检索的流程</p><p>用户提供搜索关键词，经过analyzer处理。<br>对处理后的关键词搜索索引找出对应的Document。<br>用户根据需要从找到的Document中提取需要的Field。<br><img src="../assets/image/lucene2.png" alt="image"></p></li></ol><p>1、绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：　　　　<br>        确定原始内容即要搜索的内容→采集文档→创建文档→分析文档→索引文档　　<br>2、红色表示搜索过程，从索引库中搜索内容，搜索过程包括：　　　　<br>     用户通过搜索界面→创建查询→执行搜索，从索引库搜索→渲染搜索结果</p><p><strong>索引文件结构</strong><br>   <img src="../assets/image/lucene3.png" alt="image"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><strong>Analyzer</strong></p><p>  Analyzer的作用是分词，并去除字符串中的无效词语。<br>  分词的目的是把字符串按某种语义规则划分为若干个词。英文中比较容易实现分词，因为英文本身就是以单词为单位，已经用空格分开；而中文则必须以某种方法将连成一片的句子划分成一个个词。 无效词语，如英文中的“of”、“the”和中文中的“的”、“地”等，这些词语在文章中大量出现。但是本身不包含关键信息，去掉后有利于缩小索引文件、提高命中率和执行效率。</p></li><li><p><strong>Document</strong></p><p> 用户提供的源可以是文本文件、字符串或者数据库表中的一条记录等。一个源字符串经过索引之后，以一个Document的形式存储在索引文件中。搜索服务的结果也是以Document列表的形式返回。</p></li></ul><ul><li><p><strong>Field</strong></p><p>  一个Document可以包含多个信息域，如一篇文章可以包含“标题”、“正文”、“最后修改时间”等信息域，这些信息域以Field的形式保存在Document中。<br>  Field有两个属性：存储和索引。存储属性可以控制是否对这个Field进行存储；索引属性可以控制是否对该Field进行索引。这似乎多此一举，但事实上对这两个属性的正确组合很重要。<br> 什么样的内容需要被存储：查询时需要被显示的内容都需要被存储；<br> 什么样的内容需要被分词：要被搜索的列<br> 什么样的内容需要分词：要被搜索的列<br> DoubleField、FloatField、IntField、LongField、StringField、TextField这些子类一定会被创建索引，但是不会被分词，而且不一定会被存储到文档列表。要通过构造函数中的参数Store来指定：如果Store.YES代表存储，Store.NO代表不存储<br> TextField即创建索引，又会被分词。StringField会创建索引，但是不会被分词</p></li><li><p><strong>segment</strong><br> 建立索引时，并不是每个document都马上添加到同一个索引文件，它们首先被写入到不同的小文件，然后再合并成一个大索引文件，每个小文件都是一个segment。</p></li><li><p><strong>Term</strong></p><p> Term表示文档的一个词，是搜索的最小单位。term由两部分组成：所表示的词语和这个词语所出现的field。</p></li></ul><h3 id="创建索引流程"><a href="#创建索引流程" class="headerlink" title="创建索引流程"></a>创建索引流程</h3><p>   <img src="../assets/image/lucene4.png" alt="image"><br>案例：将文件夹testFile中的文件放入lucene索引库index中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ArrayList&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//指定文件所在目录</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\git\\lucene_demo\\testFile"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : dir.listFiles()) &#123;</span><br><span class="line">            <span class="comment">//文件名称</span></span><br><span class="line">            String fileName = file.getName();</span><br><span class="line">            <span class="comment">//文件内容</span></span><br><span class="line">            String fileContext = FileUtils.readFileToString(file);</span><br><span class="line">            <span class="comment">//文件大小</span></span><br><span class="line">            Long fileSize = FileUtils.sizeOf(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建文档对象</span></span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            <span class="comment">//创建域</span></span><br><span class="line">            TextField nameField = <span class="keyword">new</span> TextField(<span class="string">"fileName"</span>, fileName, Field.Store.YES);</span><br><span class="line">            TextField contextField = <span class="keyword">new</span> TextField(<span class="string">"fileContext"</span>, fileContext, Field.Store.YES);</span><br><span class="line">            LongField sizeField = <span class="keyword">new</span> LongField(<span class="string">"fileSize"</span>, fileSize, Field.Store.YES);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将创建的所有域都存入文档中</span></span><br><span class="line">            document.add(nameField);</span><br><span class="line">            document.add(contextField);</span><br><span class="line">            document.add(sizeField);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将文档存入文档集合中</span></span><br><span class="line">            docList.add(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建分词器，StandardAnalyzer为标准分词器，中文单字分词</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定索引库的位置</span></span><br><span class="line">        Directory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"E:\\git\\lucene_demo\\index"</span>));</span><br><span class="line">        <span class="comment">//创建写对象的初始化配置</span></span><br><span class="line">        IndexWriterConfig writerConfig = <span class="keyword">new</span> IndexWriterConfig(Version.LATEST, analyzer);</span><br><span class="line">        <span class="comment">//创建写对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, writerConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文档加入写对象中</span></span><br><span class="line">        <span class="keyword">for</span> (Document document : docList) &#123;</span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交写入索引库</span></span><br><span class="line">        indexWriter.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><p>建立索引和进行检索时都要用到分词器。为了保证能正确的检索到结果，在建立索引与进行检索时使用的分词器应是同一个。<br>案例：使用Term词在索引库中查询对应的文档（注意指定域）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexTermSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建分词器（必须和创建索引时的分词器一致）</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">    Term term = <span class="keyword">new</span> Term(<span class="string">"fileName"</span>, <span class="string">"demo.txt"</span>);</span><br><span class="line">    Query query = <span class="keyword">new</span> TermQuery(term);</span><br><span class="line">    queryIndexStore(query);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryIndexStore</span><span class="params">(Query query)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//指定文档库的位置</span></span><br><span class="line">    FSDirectory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"E:\\git\\lucene_demo\\index"</span>));</span><br><span class="line">    <span class="comment">//创建读索引库的reader对象</span></span><br><span class="line">    IndexReader indexReader = IndexReader.open(directory);</span><br><span class="line">    <span class="comment">//创建索引的搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//执行搜索，参数为u查询语句，指定显示多少条记录</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"count="</span>+topDocs.totalHits);</span><br><span class="line">    <span class="comment">//获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">    <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">        <span class="comment">//获取docId</span></span><br><span class="line">        <span class="keyword">int</span> docId = scoreDoc.doc;</span><br><span class="line">        <span class="comment">//通过唯一docID获取到文档</span></span><br><span class="line">        Document document = indexReader.document(docId);</span><br><span class="line">        System.out.println(<span class="string">"fileName="</span>+document.get(<span class="string">"fileName"</span>));</span><br><span class="line">        System.out.println(<span class="string">"fileSize="</span>+document.get(<span class="string">"fileSize"</span>));</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整测试代码地址：<br><a href="https://github.com/renrr/lucene_demo" target="_blank" rel="noopener">https://github.com/renrr/lucene_demo</a></p><h2 id="luke使用"><a href="#luke使用" class="headerlink" title="luke使用"></a>luke使用</h2><blockquote><p>luke是用于查看lucene中索引文件的工具，注意luke与lucene的版本对应关系（GitHub中luke项目声明了支持的lucene版本）</p></blockquote><p>目前只支持windows<br>启动方式：<br>执行部署包中start.bat文件，或者命令行执行java -jar luke-xx.jar<br>打开索引库文件位置：<br>   <img src="../assets/image/luke.png" alt="image"><br><img src="../assets/image/luke1.png" alt="image"></p><h2 id="查看文档内容"><a href="#查看文档内容" class="headerlink" title="查看文档内容"></a>查看文档内容</h2><p><img src="../assets/image/luke2.png" alt="image"></p><p>通过搜索关键字查找文档<br>域对象:关键字搜索<br><img src="../assets/image/luke3.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lucene介绍&quot;&gt;&lt;a href=&quot;#lucene介绍&quot; class=&quot;headerlink&quot; title=&quot;lucene介绍&quot;&gt;&lt;/a&gt;lucene介绍&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="bigdata" scheme="https://renrr.github.io/categories/bigdata/"/>
    
    
      <category term="lucene" scheme="https://renrr.github.io/tags/lucene/"/>
    
  </entry>
  
</feed>
